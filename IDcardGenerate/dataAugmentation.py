import numpy as np
import random
import cv2
from PIL import Image
import os
GammaCorrection_LookUpTable = {
    '0.2': [0, 84, 96, 104, 111, 116, 120, 124, 127, 130, 133, 135, 138, 140, 142, 144, 146, 148, 150, 151, 153, 154, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 176, 177, 178, 179, 180, 181, 181, 182, 183, 184, 184, 185, 186, 186, 187, 188, 188, 189, 190, 190, 191, 192, 192, 193, 194, 194, 195, 195, 196, 196, 197, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 204, 204, 205, 205, 206, 206, 207, 207, 207, 208, 208, 209, 209, 210, 210, 211, 211, 211, 212, 212, 213, 213, 213, 214, 214, 215, 215, 215, 216, 216, 217, 217, 217, 218, 218, 218, 219, 219, 220, 220, 220, 221, 221, 221, 222, 222, 222, 223, 223, 223, 224, 224, 224, 225, 225, 225, 226, 226, 226, 227, 227, 227, 228, 228, 228, 229, 229, 229, 229, 230, 230, 230, 231, 231, 231, 232, 232, 232, 232, 233, 233, 233, 234, 234, 234, 234, 235, 235, 235, 235, 236, 236, 236, 237, 237, 237, 237, 238, 238, 238, 238, 239, 239, 239, 239, 240, 240, 240, 240, 241, 241, 241, 241, 242, 242, 242, 242, 243, 243, 243, 243, 244, 244, 244, 244, 245, 245, 245, 245, 245, 246, 246, 246, 246, 247, 247, 247, 247, 248, 248, 248, 248, 248, 249, 249, 249, 249, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 254, 254, 254, 254, 255],
    '0.4': [0, 27, 36, 43, 48, 52, 56, 60, 63, 66, 69, 72, 75, 77, 79, 82, 84, 86, 88, 90, 92, 93, 95, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 113, 115, 116, 117, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 152, 153, 154, 155, 156, 157, 157, 158, 159, 160, 161, 161, 162, 163, 164, 165, 165, 166, 167, 168, 168, 169, 170, 171, 171, 172, 173, 173, 174, 175, 176, 176, 177, 178, 178, 179, 180, 180, 181, 182, 182, 183, 184, 184, 185, 186, 186, 187, 187, 188, 189, 189, 190, 191, 191, 192, 192, 193, 194, 194, 195, 195, 196, 197, 197, 198, 198, 199, 200, 200, 201, 201, 202, 202, 203, 204, 204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 234, 235, 235, 235, 236, 236, 237, 237, 238, 238, 239, 239, 239, 240, 240, 241, 241, 242, 242, 242, 243, 243, 244, 244, 245, 245, 245, 246, 246, 247, 247, 248, 248, 248, 249, 249, 250, 250, 250, 251, 251, 252, 252, 252, 253, 253, 254, 254, 255],
    '0.67': [0, 6, 9, 12, 15, 18, 20, 22, 25, 27, 29, 31, 32, 34, 36, 38, 39, 41, 43, 44, 46, 47, 49, 50, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 138, 139, 140, 141, 142, 143, 144, 145, 146, 146, 147, 148, 149, 150, 151, 152, 153, 153, 154, 155, 156, 157, 158, 159, 159, 160, 161, 162, 163, 164, 164, 165, 166, 167, 168, 168, 169, 170, 171, 172, 173, 173, 174, 175, 176, 177, 177, 178, 179, 180, 181, 181, 182, 183, 184, 185, 185, 186, 187, 188, 188, 189, 190, 191, 192, 192, 193, 194, 195, 195, 196, 197, 198, 198, 199, 200, 201, 201, 202, 203, 204, 204, 205, 206, 207, 207, 208, 209, 210, 210, 211, 212, 213, 213, 214, 215, 215, 216, 217, 218, 218, 219, 220, 221, 221, 222, 223, 223, 224, 225, 226, 226, 227, 228, 228, 229, 230, 230, 231, 232, 233, 233, 234, 235, 235, 236, 237, 237, 238, 239, 240, 240, 241, 242, 242, 243, 244, 244, 245, 246, 246, 247, 248, 248, 249, 250, 250, 251, 252, 252, 253, 254, 255],
    '1.5': [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 17, 17, 18, 18, 19, 20, 20, 21, 22, 22, 23, 24, 24, 25, 26, 26, 27, 28, 29, 29, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 38, 39, 39, 40, 41, 42, 43, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53, 54, 55, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 221, 222, 224, 225, 227, 228, 229, 231, 232, 234, 235, 237, 238, 240, 241, 243, 244, 246, 247, 249, 250, 252, 253, 255],
    '2.5': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 27, 28, 29, 29, 30, 31, 31, 32, 33, 34, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 119, 120, 122, 123, 125, 127, 128, 130, 132, 133, 135, 137, 138, 140, 142, 144, 145, 147, 149, 151, 153, 155, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 197, 199, 201, 203, 205, 207, 210, 212, 214, 216, 219, 221, 223, 226, 228, 230, 233, 235, 237, 240, 242, 245, 247, 250, 252, 255],
    '5.0': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 23, 24, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 68, 70, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 92, 94, 96, 98, 101, 103, 106, 108, 111, 113, 116, 119, 121, 124, 127, 130, 133, 136, 139, 142, 145, 148, 152, 155, 158, 162, 165, 169, 173, 176, 180, 184, 188, 192, 196, 200, 204, 208, 213, 217, 221, 226, 230, 235, 240, 245, 250, 255]
}


def change_BrightAndContrastRatio(image, mode='Bright'):
    """ (mode='Bright')(mode='ContrastRatio') """
    if mode == 'Bright':
        b = random.randint(0, 10) * 10
        if random.randint(0, 2) == 0:
            # print('bright up')
            for i in range(image.shape[0]):
                for j in range(image.shape[1]):
                    for k in range(len(image[i, j])):
                        image[i, j][k] = max(image[i, j][k] + b, 255)  # k

        else:
            # print('bright down')
            for i in range(image.shape[0]):
                for j in range(image.shape[1]):
                    for k in range(len(image[i, j])):
                        image[i, j][k] = max(image[i, j][k] - b, 0)  # k
    else:
        image = image.astype(int)
        i = random.sample(['0.4', '0.67', '1.5', '2.5'], 1)[0]
        gamma = GammaCorrection_LookUpTable[i]
        # print('Gamma Correction:{}'.format(i))
        for i in range(image.shape[0]):
            for j in range(image.shape[1]):
                image[i, j] = gamma[image[i, j]]

    return image


def add_noise(image, mode='SaltAndPepper'):
    """ (mode='SaltAndPepper') (mode='Gaussion')"""
    imgH, imgW = image.shape[:2]
    if mode == 'SaltAndPepper':
        percetage = 0.05
        noise_num = int(percetage * imgH * imgW)
        for i in range(noise_num):
            randX = random.randint(0, imgH-1)
            randY = random.randint(0, imgW-1)
            image[randX, randY] = random.randint(0, 1) * 255
    else:
        for i in range(imgH):
            for j in range(imgW):
                image[i, j] = image[i, j] + random.gauss(0, 1)
                image[i, j] = max(0, image[i, j])
                image[i, j] = min(image[i, j], 255)

    return image


def geometric_transformation(image, mode='zoom'):
    """
    (1) zoom (2) rotate (3) affinity
    """
    if mode == 'zoom':
        ratio = random.sample([0.8, 0.85, 0.9, 0.95], 1)[0]
        # print('zoom:{}'.format(ratio))
        if random.randint(0, 1) == 0:
            image = cv2.resize(image, None, fx=ratio, fy=1,
                               interpolation=cv2.INTER_LINEAR)
        else:
            image = cv2.resize(image, None, fx=1, fy=ratio,
                               interpolation=cv2.INTER_LINEAR)
    elif mode == 'rotate':
        imgH, imgW = image.shape[:2]
        angle = random.randint(1, 10) * 0.1
        # print('rotate:{}'.format(angle))
        M = cv2.getRotationMatrix2D((imgW / 2, imgH / 2), angle, 1)
        image = cv2.warpAffine(image, M, (imgW, imgH),
                               borderMode=cv2.BORDER_REPLICATE)
    else:
        imgH, imgW = image.shape[:2]
        offset = random.randint(5, 15) * random.sample([-1, 1], 1)[0]
        # print('affine:{}'.format(offset))
        pts1 = np.float32([[0, 0], [0, imgH-1], [50, 0]])
        pts2 = np.float32([[0+offset, 0], [0, imgH-1], [50+offset, 0]])
        M = cv2.getAffineTransform(pts1, pts2)
        image = cv2.warpAffine(image, M, (imgW, imgH),
                               borderMode=cv2.BORDER_REPLICATE)

    return image


def augment(image):
    image = np.array(image, dtype='float32')

    if random.randint(0, 5) == 0:
        image = geometric_transformation(image, mode='affinity')
    if random.randint(0, 5) == 0:
        image = geometric_transformation(image, mode='rotate')
    if random.randint(0, 5) == 0:
        image = change_BrightAndContrastRatio(image, mode='Bright')
    image = add_noise(image)  # 加入噪声

    # image = Image.fromarray(image.astype('uint8')).convert('L')
    image = Image.fromarray(image.astype('uint8'))
    return image


if __name__ == '__main__':
    input_path = './data/imagesup/'
    output_path = './augmented_data/imagesup/'
    image_names = os.listdir(input_path)
    count = 0
    for image_name in image_names:
        image_path = input_path + image_name
        image_output = output_path + image_name

        image = Image.open(image_path)
        image = augment(image)

        image.save(image_output)
        print("count:", count)
        count += 1
        if count % 20 == 0:
            # print('Images Augmented {}'.format(count))
            break
